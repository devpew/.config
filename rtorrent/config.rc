# rTorrent
# --------

# Directories {{{
# -----------

# Instance layout (base paths)
method.insert = cfg.basedir,  private|const|string, (cat,(system.env,HOME),"/.cache/rtorrent/")
method.insert = cfg.download, private|const|string, (cat,(system.env,HOME),"/media/.leech/")
method.insert = cfg.logs,     private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),"session/")
method.insert = cfg.watch,    private|const|string, (cat,(cfg.basedir),"watch/")

# Create instance directories
execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.download),"\" ",\
    "\"",(cfg.logs),"\" ",\
    "\"",(cfg.session),"\" ",\
    "\"",(cfg.watch),"\" ")

# Automatically load all rc files in config.d
method.insert = cfg.drop_in, private|const|string, (cat,(system.env,HOME),"/.config/rtorrent/config.d")
execute.nothrow = bash, -c, (cat,\
    "find ", (cfg.drop_in), " -name '*.rc' ",\
    "| sort | sed -re 's/^/import=/' >", (cfg.drop_in), "/.import")
try_import = (cat, (cfg.drop_in), "/.import")

# }}}
# Network {{{
# -------

# Listening port for incoming peer traffic (fixed; you can also randomize it)
network.port_range.set = 49164-49169
network.port_random.set = no

# Tracker-less torrent and UDP tracker support
dht.mode.set = auto
dht.port.set = 49170
protocol.pex.set = yes
trackers.use_udp.set = yes

# Peer settings
throttle.max_uploads.set = 50
throttle.max_uploads.global.set = 100

throttle.min_peers.normal.set = 20
throttle.max_peers.normal.set = 60
throttle.min_peers.seed.set = 30
throttle.max_peers.seed.set = 70
trackers.numwant.set = 80

protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300

# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
pieces.memory.max.set = 1800M
network.xmlrpc.size_limit.set = 4M

# Basic operational settings (no need to change these)
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.download))
log.execute = (cat, (cfg.logs), "execute.log")
##log.xmlrpc = (cat, (cfg.logs), "xmlrpc.log")
execute.nothrow = sh, -c, (cat, "echo >",\
    (session.path), "rtorrent.pid", " ", (system.pid))

# Other operational settings (check & adapt)
encoding.add = utf8
system.umask.set = 0027
system.cwd.set = (directory.default)
network.http.dns_cache_timeout.set = 25
##pieces.hash.on_completion.set = no
##view.sort_current = seeding, greater=d.ratio=
##keys.layout.set = qwerty
##network.http.capath.set = "/etc/ssl/certs"
##network.http.ssl_verify_peer.set = 0
##network.http.ssl_verify_host.set = 0

# Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
        (cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

# Global upload and download rate in KiB. "0" for unlimited.
throttle.global_down.max_rate.set_kb = 6000
# Upload bandwidth is pathetic in my country :(
throttle.global_up.max_rate.set_kb = 300

# Run the rTorrent process as a daemon in the background (and control via XMLRPC port or socket)
# Use 'rtorrent -o system.daemon.set=true' to enable ad-hoc
# system.daemon.set = true
network.scgi.open_port = 0.0.0.0:49163
#network.scgi.open_local = (cat,(session.path),rtorrent.sock)
#execute.nothrow = chmod,770,(cat,(session.path),rtorrent.sock)

# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat, "Logging to ", (cfg.logfile))
log.open_file = "log", (cfg.logfile)
log.add_output = "info", "log"
##log.add_output = "tracker_debug", "log"

# }}}
# Misc {{{
# ----
# Close torrents when diskspace is low.
schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))

# DISABLED LEGACY
# Press 9 in your rTorrent client to see the changes in action
# schedule = filter_active,30,30,"view_filter = active,\"or={d.get_up_rate=,d.get_down_rate=}\""

# }}}
# Watch Directory {{{
# ---------------
# Watch directories (add more as you like, but use unique schedule names)
schedule2 = watch_directory, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "*.torrent")))
# DISABLED LEGACY
# schedule = watch_directory_1,10,10,"load_start=~/.cache/rtorrent/watch/*.torrent"
# schedule = tied_directory,10,10,start_tied=
# schedule = untied_directory,10,10,stop_untied=

# }}}
# Post-process {{{
# ------------
# DISABLED LEGACY
# Reference: https://code.google.com/p/gi-torrent/wiki/rTorrent_XMLRPC_reference
# log.execute=/tmp/rtorrent_exec.log
# system.method.set_key = event.download.finished,complete_process,"d.stop=;execute=dizzer,$d.get_name=,$d.get_base_path=;d.check_hash="
# system.method.set_key = event.download.hash_done,complete_restart,"branch={d.get_complete=,d.start=}"
# system.method.set_key = event.download.erased,remove_meta,"branch=d.get_complete=,\"execute={rm,-rf,--,$d.get_base_path=}\""

# }}}
# vim: set ft=dosini fdm=marker ts=2 sw=2 tw=80 noet :
